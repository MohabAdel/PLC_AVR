
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f7  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000652  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025a  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e1  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
#define ADC_PIN
#define	LED_PIN

void ADC_Init(void)
{
	DDRC = 0x00;
  90:	17 b8       	out	0x07, r1	; 7
	DDRB |=(1<<4);
  92:	24 9a       	sbi	0x04, 4	; 4
	ADMUX = 0x04;
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0xDF; 
  9a:	8f ed       	ldi	r24, 0xDF	; 223
  9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	sei();
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <__vector_21>:

uint32_t data=0;

uint8_t converted=0;
ISR(ADC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
	//static  uint16_t count=0;
	uint32_t an_data=0;
	an_data = (ADCL) | (ADCH << 8);
  c2:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	b8 2b       	or	r27, r24
	data =  3300 * an_data/1024;
  ce:	24 ee       	ldi	r18, 0xE4	; 228
  d0:	3c e0       	ldi	r19, 0x0C	; 12
  d2:	0e 94 ba 00 	call	0x174	; 0x174 <__usmulhisi3>
  d6:	dc 01       	movw	r26, r24
  d8:	cb 01       	movw	r24, r22
  da:	07 2e       	mov	r0, r23
  dc:	7a e0       	ldi	r23, 0x0A	; 10
  de:	b6 95       	lsr	r27
  e0:	a7 95       	ror	r26
  e2:	97 95       	ror	r25
  e4:	87 95       	ror	r24
  e6:	7a 95       	dec	r23
  e8:	d1 f7       	brne	.-12     	; 0xde <__vector_21+0x3a>
  ea:	70 2d       	mov	r23, r0
  ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
  f0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <data+0x1>
  f4:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <data+0x2>
  f8:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <data+0x3>
	converted=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	//count++;
}
 102:	bf 91       	pop	r27
 104:	af 91       	pop	r26
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	7f 91       	pop	r23
 10c:	6f 91       	pop	r22
 10e:	5f 91       	pop	r21
 110:	4f 91       	pop	r20
 112:	3f 91       	pop	r19
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:




int main(){
	ADC_Init();
 120:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	while (1){
		if(converted){
			ADCSRA |= (1<<4)|(1<<6);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0


int main(){
	ADC_Init();
	while (1){
		if(converted){
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	88 23       	and	r24, r24
 12e:	29 f0       	breq	.+10     	; 0x13a <main+0x1a>
			ADCSRA |= (1<<4)|(1<<6);
 130:	80 81       	ld	r24, Z
 132:	80 65       	ori	r24, 0x50	; 80
 134:	80 83       	st	Z, r24
			converted=0;
 136:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		if(data>=3000){
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data>
 13e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <data+0x1>
 142:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <data+0x2>
 146:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <data+0x3>
 14a:	88 3b       	cpi	r24, 0xB8	; 184
 14c:	9b 40       	sbci	r25, 0x0B	; 11
 14e:	a1 05       	cpc	r26, r1
 150:	b1 05       	cpc	r27, r1
 152:	70 f0       	brcs	.+28     	; 0x170 <main+0x50>
			PORTB |= (1<<4);
 154:	2c 9a       	sbi	0x05, 4	; 5
		}
		if(data<3000){
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <data+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <data+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <data+0x3>
 166:	88 3b       	cpi	r24, 0xB8	; 184
 168:	9b 40       	sbci	r25, 0x0B	; 11
 16a:	a1 05       	cpc	r26, r1
 16c:	b1 05       	cpc	r27, r1
 16e:	e0 f6       	brcc	.-72     	; 0x128 <main+0x8>
			PORTB &=~(1<<4);
 170:	2c 98       	cbi	0x05, 4	; 5
 172:	da cf       	rjmp	.-76     	; 0x128 <main+0x8>

00000174 <__usmulhisi3>:
 174:	0e 94 c1 00 	call	0x182	; 0x182 <__umulhisi3>

00000178 <__usmulhisi3_tail>:
 178:	b7 ff       	sbrs	r27, 7
 17a:	08 95       	ret
 17c:	82 1b       	sub	r24, r18
 17e:	93 0b       	sbc	r25, r19
 180:	08 95       	ret

00000182 <__umulhisi3>:
 182:	a2 9f       	mul	r26, r18
 184:	b0 01       	movw	r22, r0
 186:	b3 9f       	mul	r27, r19
 188:	c0 01       	movw	r24, r0
 18a:	a3 9f       	mul	r26, r19
 18c:	70 0d       	add	r23, r0
 18e:	81 1d       	adc	r24, r1
 190:	11 24       	eor	r1, r1
 192:	91 1d       	adc	r25, r1
 194:	b2 9f       	mul	r27, r18
 196:	70 0d       	add	r23, r0
 198:	81 1d       	adc	r24, r1
 19a:	11 24       	eor	r1, r1
 19c:	91 1d       	adc	r25, r1
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
